#!/bin/ksh

#####################################################################
echo "-----------------------------------------------------"
echo " exgfs_nceppost.sh.ecf" 
echo " Apr 99 - Michaud - Generated to post global forecast"
echo " Mar 03 - Zhu - Add post for 0.5x0.5 degree"
echo " Nov 03 - Gilbert - Modified from exglobal_post.sh.sms"
echo "                    to run only one master post job."
echo " Jan 07 - Cooke - Add DBNet Alert for Master files"
echo " May 07 - Chuang - Modified scripts to run unified post"
echo " Feb 10 - Carlis - Add 12-hr accum precip bucket at f192"
echo " Jun 12 - Wang   - Add option for grb2"
echo " Jul 14 - Carlis - Add 0.25 deg master "
echo "-----------------------------------------------------"
#####################################################################

set -x

cd $DATA

msg="HAS BEGUN on `hostname`"
postmsg "$jlogfile" "$msg"

export POSTGPSH=/scratch/cccr/prajeesh/ShortRange/GFSv14_HS/IITM_GFSv14/src/postprocessing/ncep_post/global_nceppost.sh

############################################################
#  Define Variables:
#  -----------------
#  FH           is the current forecast hour.
#  SLEEP_TIME   is the number of seconds to sleep before exiting with error.
#  SLEEP_INT    is the number of seconds to sleep between restrt file checks.
#  restart_file is the name of the file to key off of to kick off post.
############################################################
export IO=${LONB:-1440}
export JO=${LATB:-721}
# specify default model output format: 3 for sigio and 4
# for nemsio
export OUTTYP=${OUTTYP:-4}

############################################################
# Post Analysis Files before starting the Forecast Post
############################################################
# Process analysis when post_times is 00
 export stime=`echo $post_times | cut -c1-3`
if [ $OUTTYP -eq 4 ] ; then
  export loganl=$COMIN/${RUN}.t${cyc}z.atmanl.nemsio
else
  export loganl=$COMIN/${RUN}.t${cyc}z.sanl
fi
if test -f $loganl -a ${RUN} != "drfmr" -a ${stime} = "anl"
then
   
# add new environmental variables for running new ncep post
# Validation date

   export VDATE=${PDY}${cyc}
   
# specify output file name from chgres which is input file name to nceppost 
# if model already runs gfs io, make sure GFSOUT is linked to the gfsio file
# new imported variable for global_nceppost.sh

   export GFSOUT=${RUN}.${cycle}.gfsioanl

# specify smaller control file for GDAS because GDAS does not
# produce flux file, the default will be /nwprod/parm/gfs_cntrl.parm

   if [ $GRIBVERSION = 'grib1' ]; then
     export IGEN=$IGEN_ANL
     export CTLFILE=$PARMglobal/gfs_cntrl.parm_anl
     export ANOMCATSH=$USHglobal/global_anomcat.sh
   elif [ $GRIBVERSION = 'grib2' ]; then
# use grib2 nomonic table in post directory as default intsead
# as new table with gtg won't be implemented before FY17 GFS upgrade
     export POSTGRB2TBL=${POSTGRB2TBL:-$PARMglobal/params_grib2_tbl_new}
     export PostFlatFile=${PostFlatFile:-$PARMglobal/postxconfig-NT-GFS-ANL.txt}
   fi

   if [[ $RUN = gfs ]] ; then
     sed <$CTLFILE1 -e "s#${IGEN_ANL}#${IGEN_ANL}#" > ./ctlfile_anl
     export CTLFILE=./ctlfile_anl
   else
     sed <$CTLFILE1 -e "s#${IGEN_ANL}#${IGEN_GDAS_ANL}#" > ./ctlfile_anl
     export CTLFILE=./ctlfile_anl
   fi
   
   #rm sigfile sfcfile
   if [ $OUTTYP -eq 4 ] ; then
     export NEMSINP=$COMIN/${RUN}.t${cyc}z.atmanl.nemsio
     cp $COMIN/${RUN}.t${cyc}z.sfcanl.nemsio sfcfile
   else
     cp $COMIN/${RUN}.t${cyc}z.sanl sigfile
     cp $COMIN/${RUN}.t${cyc}z.sfcanl sfcfile 
   fi

   export SIGINP=sigfile
   export SFCINPUT=sfcfile
   export PGBOUT=pgbfile
   export PGIOUT=pgifile
   export PGBOUT2=pgbfile.grib2
   export PGIOUT2=pgifile.grib2.idx
   export IGEN=$IGEN_ANL
   export FILTER=1

    echo "running post at line 105 exgfs_nceppost.sh.ecf"
   $POSTGPSH
   
   if test $GRIBVERSION = 'grib2'
   then
     cp $PGBOUT $PGBOUT2
   fi

   if test "$SENDCOM" = 'YES'
   then
     export fhr3=anl
     if [ $GRIBVERSION = 'grib1' ] 
     then
       MASTERANL=${RUN}.${cycle}.master.grb${fhr3}
       MASTERANLIDX=${RUN}.${cycle}.master.grbi${fhr3}
     elif [ $GRIBVERSION = 'grib2' ]
     then
       MASTERANL=${RUN}.${cycle}.master.grb2${fhr3}
       MASTERANLIDX=${RUN}.${cycle}.master.grb2i${fhr3}
     fi

     if [ $GRIBVERSION = 'grib1' ]
     then 
       cp pgbfile $COMOUT/${MASTERANL}
       cp pgifile $COMOUT/${MASTERANLIDX}
     elif [ $GRIBVERSION = 'grib2' ]
     then
       cp $PGBOUT2 $COMOUT/${MASTERANL}
       $GRB2INDEX $PGBOUT2 $COMOUT/${MASTERANLIDX}
     fi

     if test "$SENDDBN" = 'YES'
     then
       $DBNROOT/bin/dbn_alert MODEL GFS_MSC_sfcanl $job $COMOUT/${RUN}.${cycle}.sfcanl.nemsio
       $DBNROOT/bin/dbn_alert MODEL GFS_SA $job $COMIN/${RUN}.t${cyc}z.atmanl.nemsio
       $DBNROOT/bin/dbn_alert MODEL GFS_MASTER $job $COMOUT/${MASTERANL}
     fi 

   fi
   rm pgbfile pgifile pgbfile.grib2 tfile prmsl h5wav
   ecflow_client --event release_pgrb2_anl
   exit
fi

SLEEP_LOOP_MAX=`expr $SLEEP_TIME / $SLEEP_INT`

# Chuang: modify to submit one post job at a time
############################################################
# Loop Through the Post Forecast Files 
############################################################

for fhr in $post_times
do
    echo 'Start processing fhr='$post_times
    ###############################
    # Start Looping for the 
    # existence of the restart files
    ###############################
    set -x
    export pgm="postcheck"
    ic=1
    while [ $ic -le $SLEEP_LOOP_MAX ]
    do
       if test -f $restart_file$fhr
       then
          break
       else
          ic=`expr $ic + 1`
          sleep $SLEEP_INT
       fi
       ###############################
       # If we reach this point assume
       # fcst job never reached restart 
       # period and error exit
       ###############################
       if [ $ic -eq $SLEEP_LOOP_MAX ]
       then
          export err=9
          err_chk
       fi
    done
    set -x

    msg="Starting post for fhr=$fhr"
    postmsg "$jlogfile" "$msg"

    ###############################
    # Put restart files into /nwges 
    # for backup to start Model Fcst
    ###############################
    #rm sigfile sfcfile flxfile
    if [ $OUTTYP -eq 4 ] ; then
      #if [ $fhr -le 99 ] ; then
      if [ $fhr -le 2 ] ; then
#        export NEMSINP=$COMIN/${RUN}.t${cyc}z.atmf0$fhr.nemsio
#        cp $COMIN/${RUN}.t${cyc}z.sfcf0$fhr.nemsio sfcfile
        export NEMSINP=$COMIN/SIG.0F$fhr
        ln -sf $COMIN/SFC.F0$fhr sfcfile
      else
        export NEMSINP=$COMIN/SIG.F$fhr
        ln -sf $COMIN/SFC.F$fhr sfcfile
      fi
    else
      cp $COMIN/${RUN}.t${cyc}z.sf$fhr sigfile
      cp $COMIN/${RUN}.t${cyc}z.bf$fhr sfcfile
    fi
# specify 0.25 degree output
    if [ $IDRT -eq 0 -a $OUTTYP -le 3 ] ; then
      export D3DINP=
      if [ $LONB -eq 360 ] ; then
        $COPYGB -xg3 $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr $DATA/flxfile
      elif [ $LONB -eq 720 ] ; then
        $COPYGB -xg4 $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr $DATA/flxfile
      elif [ $LONB -eq 1440 ] ; then
        $COPYGB -g193 -i0 -x $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr $DATA/flxfile
      fi
      export FLXINP=$DATA/flxfile
    else
      if [ $OUTTYP -eq 4 ] ; then
        #if [ $fhr -le 99 ] ; then
        if [ $fhr -le 2 ] ; then
          #export FLXINP=$COMIN/${RUN}.t${cyc}z.flxf0$fhr.nemsio
          export FLXINP=$COMIN/FLX.F0$fhr
        else
          export FLXINP=$COMIN/FLX.F$fhr
        fi
      else
         cp $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr flxfile
      fi
    fi

    if test $fhr -gt 0
    then
      export IGEN=$IGEN_FCST
    else
      export IGEN=$IGEN_ANL
    fi
    
# add new environmental variables for running new ncep post
# Validation date

    export VDATE=`${NDATE} +${fhr} ${PDY}${cyc}`
   
# set outtyp to 1 because we need to run chgres in the post before model start running chgres
# otherwise set to 0, then chgres will not be executed in global_nceppost.sh
     
    export OUTTYP=${OUTTYP:-4}
   
# specify output file name from chgres which is input file name to nceppost 
# if model already runs gfs io, make sure GFSOUT is linked to the gfsio file
# new imported variable for global_nceppost.sh
#

    export GFSOUT=${RUN}.${cycle}.gfsio${fhr}

    if [ $GRIBVERSION = 'grib1' ]; then
      if test $fhr -gt 0
      then
        export IGEN=$IGEN_FCST
      else
        export IGEN=$IGEN_ANL
      fi
      export CTLFILE=$PARMglobal/gfs_cntrl.parm
      export ANOMCATSH=$USHglobal/global_anomcat.sh
    elif [ $GRIBVERSION = 'grib2' ]; then
# use grib2 nomonic table in post directory as default intsead
# as new table with gtg won't be implemented before FY17 GFS upgrade
      export POSTGRB2TBL=${POSTGRB2TBL:-$PARMglobal/params_grib2_tbl_new}
      export PostFlatFile=${PostFlatFile:-$PARMglobal/postxconfig-NT-GFS.txt}

      if [ $RUN = gfs ] ; then
        export IGEN=$IGEN_GFS
        if [ $fhr -gt 0 ] ; then export IGEN=$IGEN_FCST ; fi
      else
        export IGEN=$IGEN_GDAS_ANL
        if [ $fhr -gt 0 ] ; then export IGEN=$IGEN_FCST ; fi
      fi
      if [[ $RUN = gfs ]] ; then
        if test $fhr -eq 0
        then
          export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-F00.txt
          export CTLFILE1=$PARMglobal/postcntrl_gfs_f00.xml
	  sed <$CTLFILE1 -e "s#${IGEN_FCST}#${IGEN_ANL}#" > ./ctlfile_f00
	  export CTLFILE=./ctlfile_f00
        else
          export CTLFILE1=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs.xml}
          export CTLFILE=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs.xml}
        fi
      else
        if test $fhr -eq 0
        then
          export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-F00.txt
          export CTLFILE1=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs_f00.xml}
          sed <$CTLFILE1 -e "s#${IGEN_FCST}#${IGEN_GDAS_ANL}#" > ./ctlfile_f00
          export CTLFILE=./ctlfile_f00
        else
          export CTLFILE1=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs_anl.xml}
          sed <$CTLFILE1 -e "s#${IGEN_FCST}#${IGEN_GDAS_ANL}#" > ./ctlfile_f00
          export CTLFILE=./ctlfile_f00
        fi
      fi
      export CTL=`basename $CTLFILE1`
    fi
    
    export SIGINP=sigfile
    export NEMSINP=${NEMSINP:-nemsfile}
    export SFCINPUT=sfcfile
    export FLXINP=${FLXINP:-flxfile}
    export FLXIOUT=flxifile
    export PGBOUT=pgbfile
    export PGIOUT=pgifile
    export PGBOUT2=pgbfile.grib2
    export PGIOUT2=pgifile.grib2.idx
    export FILTER=1 
    export VDATE=`$NDATE +${fhr} ${PDY}${cyc}`

    echo "running post at line 321 exgfs_nceppost.sh.ecf"
    $POSTGPSH

    mv outpost_gfs_${VDATE}_${CTL} outpost_gfs_${VDATE}_master

    if test $GRIBVERSION = 'grib2'
    then
      cp $PGBOUT $PGBOUT2
    fi

    if [ $GRIBVERSION = 'grib1' ]; then
      MASTERFL=${RUN}.${cycle}.master.grb
      MASTERFLIDX=${RUN}.${cycle}.master.grbi
    elif [ $GRIBVERSION = 'grib2' ]; then
        MASTERFL=${RUN}.${cycle}.master.grb2f${fhr}
        MASTERFLIDX=gfs.${cycle}.master.grb2if${fhr}
    fi
#At forecast hour 192 create a 12hr accum precip
    if test $GRIBVERSION = 'grib1'
    then
      if [ $fhr -eq 192 ] ; then
        cp ${DATA}/pgbfile ${DATA}/pgbfile_$fhr
        cp ${DATA}/pgifile ${DATA}/pgifile_$fhr
	let fhr6=fhr-6
	export ic=1
	while [ $ic -le 6 ];do
	  if [ -s ${COMIN}/gfs.t${cyc}z.master.grbf${fhr6} ]; then
	    break
	  else
	    ic=`expr $ic + 1`
	    echo "GFS F186 pgb file not found, waiting 60 seconds"
	    sleep 10
	  fi
	done

	export XLFUNIT_13="${COMIN}/gfs.t${cyc}z.master.grbf${fhr6}"
        export XLFUNIT_14="${COMIN}/gfs.t${cyc}z.master.grbif${fhr6}"
        export XLFUNIT_15="pgbfile_$fhr"
        export XLFUNIT_16="pgifile_$fhr"
        export XLFUNIT_50="12precip"
        export XLFUNIT_51="12cprecip"
        export XLFUNIT_52="12snow"
/nw${envir}/exec/gfs_smartmakeprecip <<EOF > makeprecip12.out
$fhr $fhr6
EOF
        export err=$?
	if [ $err -eq 0 ]
	then
	  cat 12precip 12cprecip >> pgbfile_$fhr
	  $GRBINDEX pgbfile_$fhr pgifile_$fhr
	else
	  echo " failed while generating 12 hr precipitation bucket for F192 "
	fi
  	  cp pgbfile_$fhr pgbfile
	  cp pgifile_$fhr pgifile
          rm pgbfile_$fhr pgifile_$fhr 12precip 12cprecip 12snow makeprecip12.out
      fi #end of 12hr bucket precip at $fhr = 192
    fi

    if test $SENDCOM = "YES"
    then
      if test $fhr -lt 100
      then
        pad="0"
      else
        pad=""
      fi
#      echo "$PDY$cyc$pad$fhr" > $COMOUT/${RUN}.t${cyc}z.master.control
      if [ $GRIBVERSION = 'grib1' ] ; then
        cp pgbfile $COMOUT/${MASTERFL}f$fhr
        cp pgifile $COMOUT/${MASTERFLIDX}f$fhr
      elif [ $GRIBVERSION = 'grib2' ] ; then
        cp $PGBOUT2 $COMOUT/${MASTERFL}
	$GRB2INDEX $PGBOUT2 $COMOUT/${MASTERFLIDX}
      fi
 
      if test "$SENDDBN" = 'YES'
      then
        if [ $GRIBVERSION = 'grib1' ] ; then
	  $DBNROOT/bin/dbn_alert MODEL GFS_MASTER $job $COMOUT/${MASTERFL}f$fhr3
	elif [ $GRIBVERSION = 'grib2' ] ; then
	  $DBNROOT/bin/dbn_alert MODEL GFS_MASTER $job $COMOUT/${MASTERFL}
	fi

      fi 

#      x3=`expr $fhr % 3`
# x3=0 ---> Standard 3-hourly or 12-hourly output
#           Only master grib files are needed for the hourly files
#      if [ $x3 -eq 0 ] ; then
        export fhr
        $USHgfs/gfs_transfer.sh
#      fi
    fi
    rm pgbfile* pgifile* tfile prmsl h5wav

# use post to generate GFS Grib2 Flux file as model generated Flux file
# will be in nemsio format after FY17 upgrade.
    if [ $OUTTYP -eq 4 ] ; then
      if test $fhr -eq 0
      then
       export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-FLUX-F00.txt
      else
       export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-FLUX.txt
      fi
      export PGBOUT=flxfile
      export FILTER=0
    echo "running post at line 428 exgfs_nceppost.sh.ecf"
      $POSTGPSH
      mv flxfile $COMOUT/${RUN}.t${cyc}z.sfluxgrbf${fhr}.grib2
      $WGRIB2 -s $COMOUT/${RUN}.t${cyc}z.sfluxgrbf${fhr}.grib2 > $COMOUT/${RUN}.t${cyc}z.sfluxgrbf${fhr}.grib2.idx
      if test "$SENDDBN" = 'YES'
      then
        $DBNROOT/bin/dbn_alert MODEL GFS_SGB_GB2 $job $COMOUT/${RUN}.t${cyc}z.sfluxgrbf${fhr}.grib2
        $DBNROOT/bin/dbn_alert MODEL GFS_SGB_GB2_WIDX $job $COMOUT/${RUN}.t${cyc}z.sfluxgrbf${fhr}.grib2.idx 
      fi
     fi
      
# process satellite look alike separately so that master pgb gets out in time    
# set outtyp to 2 because master post already generates gfs io files
     
    export OUTTYP=${OUTTYP:-4}
   
# specify output file name from chgres which is input file name to nceppost 
# if model already runs gfs io, make sure GFSOUT is linked to the gfsio file
# new imported variable for global_nceppost.sh

    export GFSOUT=${RUN}.${cycle}.gfsio${fhr}     

    # link satellite coefficients files, use hwrf version as ops crtm 2.0.5
    # does not new coefficient files used by post
#   export FIXCRTM=${NWROOTp2}/hwrf.${hwrf_ver}/fix/hwrf-crtm-2.0.6
    $USHglobal/link_crtm_fix.sh $FIXCRTM

    if [ $GRIBVERSION = 'grib1' ]; then
      export CTLFILE=$PARMglobal/gfs_cntrl_goes.parm
    elif [ $GRIBVERSION = 'grib2' ] ; then 
      export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-GOES.txt      
      export CTLFILE1=${CTLFILEGOES:-$PARMglobal/postcntrl_gfs_goes.xml}
      export CTLFILE=${DATA}/postcntrl_gfs_goes.xml
      if test $fhr -eq 0
      then
        sed <$CTLFILE1 -e "s#${IGEN_FCST}#${IGEN_ANL}#" >$CTLFILE
      else
        cp $CTLFILE1 $CTLFILE
      fi
    fi
    export FLXINP=${FLXINP:-flxfile}
    export FLXIOUT=flxifile
    export PGBOUT=goesfile
    export PGIOUT=goesifile
    export FILTER=0
    export IO=0
    export JO=0
    export IGEN=0

    if [ $NET = gfs ]; then    
    echo "running post at line 478 exgfs_nceppost.sh.ecf"
      $POSTGPSH
    fi

    if [ $GRIBVERSION = 'grib1' ]; then
      SPECIALFL=gfs.${cycle}.special.grb
      SPECIALFLIDX=gfs.${cycle}.special.grbi
    elif [ $GRIBVERSION = 'grib2' ]; then
      SPECIALFL=gfs.${cycle}.special.grb2
      SPECIALFLIDX=gfs.${cycle}.special.grb2i
    fi
    fhr3=$fhr

    if test $SENDCOM = "YES"
    then
      if test $fhr -lt 100
      then
        pad="0"
      else
        pad=""
      fi

#       echo "$PDY$cyc$pad$fhr" > $COMOUT/${RUN}.t${cyc}z.master.control

       mv goesfile $COMOUT/${SPECIALFL}f$fhr
       mv goesifile $COMOUT/${SPECIALFLIDX}f$fhr
    fi
    rm goesfile goesifile
# end of satellite processing

##########################  GTG  start ##########################
# process  gtg turbulence separately so that master pgb and 
# satellite look alike gets out in time.

# process gtg turbulence only when fhr is every 3 hour between [3, 36]
    if [[ $fhr -ge 3  &&  $fhr -le 36  && $((fhr%3)) -eq 0 ]] ; then
      export OUTTYP=${OUTTYP:-4}
   
# specify output file name from chgres which is input file name to nceppost 
# if model already runs gfs io, make sure GFSOUT is linked to the gfsio file
# new imported variable for global_nceppost.sh
      export GFSOUT=${RUN}.${cycle}.gfsio${fhr}     

      # gtg has its own configurations
      cp $PARMglobal/gtg.config.gfs gtg.config

      if [[ $RUN = gfs && $GRIBVERSION = 'grib2' ]] ; then
          export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-GTG.txt      
	  export CTLFILE=${CTLFILEGTG:-$PARMglobal/postcntrl_gfs_gtg.xml}

	  export SIGINP=sigfile
	  export NEMSINP=${NEMSINP:-nemsfile}
	  export SFCINPUT=sfcfile
	  export FLXINP=${FLXINP:-flxfile}
	  export FLXIOUT=flxifile
	  export PGBOUT=gtgfile
	  export PGIOUT=gtgifile
	  export FILTER=0
	  export IGEN=$IGEN_GFS
    
    echo "running post at line 538 exgfs_nceppost.sh.ecf"
	  $POSTGPSH

	  SPECIALFL=gfs.${cycle}.gtg.grb2
	  SPECIALFLIDX=gfs.${cycle}.gtg.grb2i

	  if test $SENDCOM = "YES"
	  then
	      cp $PGBOUT $COMOUT/${SPECIALFL}f$fhr
	      cp $PGIOUT $COMOUT/${SPECIALFLIDX}f$fhr
              if [ $SENDDBN = YES ]; then
                $DBNROOT/bin/dbn_alert MODEL GFS_GTG_GB2 $job $COMOUT/${SPECIALFL}f$fhr
              fi
	  fi
      else
          echo 'Warning!!!! GTG is NOT generated!!! Currently GTG only supports GFS and grib2.'
      fi
    else
	echo 'Warning!!!! GTG is NOT generated!!! Currently GTG forecast hour is every 3 hour between [3, 36].'
    fi # $fhr [3, 36]
###########################  GTG  end ###########################


#    rm flxfile flxifile gtgfile gtgifile
# end of gtg turbulence processing

done

cat $pgmout

########################################################

msg='ENDED NORMALLY.'
#postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
